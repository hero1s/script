数据库规范建议及说明

一、基础规范建议

（1）使用InnoDB存储引擎
 
（2）使用UTF8MB4字符集
 
（3）数据表、数据字段必须有注释
 
（4）建议不要使用存储过程、视图、触发器、Event
 
（5）建议不要存储大文件或者大照片


二、命名规范建议

 (1) 用户名命名规则，以业务名_库名形式（比如：uc_order）
 
（2）库名、表名、字段名：小写，下划线风格，不超过32个字符，不要使用关键字，禁止拼音和英文混用
 
（3）表名t_xxx，非唯一索引名idx_xxx(x字段收字母)，唯一索引名uniq_xxx（单列索引：x为字段名，多列索引：x为字段首字母）
     例如：alter table dbname add index idx_ul(uid,lastpost);
           alter table dbname add index uniq_time(time);

三、表设计规范建议

（1）单实例表数目小于800
 	
（2）单表列数目小于30
 	
（3）表必须有主键，最好使用自增主键
说明：
a）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用
b）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率
c）无主键的表删除，影响从库回放，容易导致延迟
 
（4）不要使用外键，让程序去实现
说明：外键会导致表与表之间耦合，update与delete操作都会扫描相关联的表，十分影响sql的性能，
甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先
 

四、字段设计规范建议

（1）字段定义必须有NOT NULL并且提供默认值
说明：
a）null的列使用索引、索引统计、值比较都更加复杂，对MySQL来说更难优化
b）null这种类型MySQL内部优化器需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多
c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识
d）对null 的处理时候，只能采用is null或 is not null 而不能采用=、in、<、<>、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录 

（2）避免使用TEXT、BLOB类型
说明：
a）会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致buffer命中率急剧降低，影响数据库稳定性
b) 无法避免使用的情况下，必须将大字段进行拆分
 
（4）字段选择，选择合适的数据类型，
例如：涉及到区号或者国家代号，可能出现+-,考虑使用varchar,如果不考虑这些因素，使用int类型

（5）建议不要使用ENUM，使用TINYINT代替
说明：
a）增加新的ENUM值要做DDL操作
b）ENUM的内部实际存储就是整数，不是我们定义的是字符串


五、索引设计规范建议

（1）单表索引建议控制在5个以内
说明：索引越多，DML操作操作越耗时，维护索引信息时间更多

（2）组合索引字段数建议不超过5个
说明：字段超过5个时，实际已经起不到有效过滤数据的作用
 
（3）建议不在更新十分频繁、区分度不高的列上建立索引
说明：
a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能
b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似。
特殊说明：只查数据分布较少的情况下，status类型字段也可以考虑创建索引，比如100W数据，1占95%，0占5%，只查0的情况下，也可创建索引。
 
（4）建立组合索引，把区分度高的字段放在前面,同时考虑最左前缀原则
	
	

六、SQL写法建议

（1）避免使用SELECT *，只获取必要的字段，显示说明列属性
说明：
a）读取不需要的列会增加CPU、IO、NET消耗
b）不能有效的利用覆盖索引
c）使用SELECT *容易在增加或者删除字段后出现程序BUG
 
（2）避免使用INSERT INTO t_xxx VALUES(xxx)，显示指定插入的列属性
说明：容易在增加或者删除字段后出现程序BUG
 
（3）避免字段隐式转换, phone-->varchar(30);
说明：
1）SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，无法命中phone索引，
2) join时关联字段存在隐式转换不会走索引

（4）避免在WHERE条件的属性上使用函数或者表达式
说明：SELECT uid FROM t_user WHERE from_unixtime(day)>='2017-02-15' 会导致全表扫描，无法命中phone索引
正确的写法是：SELECT uid FROM t_user WHERE day>= unix_timestamp('2017-02-15 00:00:00')
 
（5）避免负向查询，以及%开头的模糊查询
说明：
a）负向查询条件：NOT、!=、<>、!<、!>、NOT IN、NOT LIKE等，会导致全表扫描
b）%开头的模糊查询，会导致全表扫描
 
（6）避免大表使用JOIN查询，禁止大表使用子查询
说明：会产生数据太多会导致使用磁盘临时表，消耗较多内存与CPU，消耗更多IO，极大影响数据库稳定性

（7）避免使用or，将使用改成使用in，或者union/union all
说明：在innodb引擎下无法很好利用索引